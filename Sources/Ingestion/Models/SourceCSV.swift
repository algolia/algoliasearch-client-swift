// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct SourceCSV: Codable, JSONEncodable {
    /// URL of the file.
    public var url: String
    /// Name of a column that contains a unique ID which will be used as `objectID` in Algolia.
    public var uniqueIDColumn: String?
    /// Key-value pairs of column names and their expected types.
    public var mapping: [String: MappingTypeCSV]?
    public var method: MethodType?
    /// The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are
    /// forbidden).
    public var delimiter: String?

    public init(
        url: String,
        uniqueIDColumn: String? = nil,
        mapping: [String: MappingTypeCSV]? = nil,
        method: MethodType? = nil,
        delimiter: String? = nil
    ) {
        self.url = url
        self.uniqueIDColumn = uniqueIDColumn
        self.mapping = mapping
        self.method = method
        self.delimiter = delimiter
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case url
        case uniqueIDColumn
        case mapping
        case method
        case delimiter
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.url, forKey: .url)
        try container.encodeIfPresent(self.uniqueIDColumn, forKey: .uniqueIDColumn)
        try container.encodeIfPresent(self.mapping, forKey: .mapping)
        try container.encodeIfPresent(self.method, forKey: .method)
        try container.encodeIfPresent(self.delimiter, forKey: .delimiter)
    }
}

extension SourceCSV: Equatable {
    public static func ==(lhs: SourceCSV, rhs: SourceCSV) -> Bool {
        lhs.url == rhs.url &&
            lhs.uniqueIDColumn == rhs.uniqueIDColumn &&
            lhs.mapping == rhs.mapping &&
            lhs.method == rhs.method &&
            lhs.delimiter == rhs.delimiter
    }
}

extension SourceCSV: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.url.hashValue)
        hasher.combine(self.uniqueIDColumn?.hashValue)
        hasher.combine(self.mapping?.hashValue)
        hasher.combine(self.method?.hashValue)
        hasher.combine(self.delimiter?.hashValue)
    }
}
