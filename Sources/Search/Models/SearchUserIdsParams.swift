// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// OK
public struct SearchUserIdsParams: Codable, JSONEncodable {
    /// Query to search. The search is a prefix search with [typo
    /// tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/) enabled.
    /// An empty query will retrieve all users.
    public var query: String
    /// Cluster name.
    public var clusterName: String?
    /// Page of search results to retrieve.
    public var page: Int?
    /// Number of hits per page.
    public var hitsPerPage: Int?

    public init(query: String, clusterName: String? = nil, page: Int? = nil, hitsPerPage: Int? = nil) {
        self.query = query
        self.clusterName = clusterName
        self.page = page
        self.hitsPerPage = hitsPerPage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case query
        case clusterName
        case page
        case hitsPerPage
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.query, forKey: .query)
        try container.encodeIfPresent(self.clusterName, forKey: .clusterName)
        try container.encodeIfPresent(self.page, forKey: .page)
        try container.encodeIfPresent(self.hitsPerPage, forKey: .hitsPerPage)
    }
}

extension SearchUserIdsParams: Equatable {
    public static func ==(lhs: SearchUserIdsParams, rhs: SearchUserIdsParams) -> Bool {
        lhs.query == rhs.query &&
            lhs.clusterName == rhs.clusterName &&
            lhs.page == rhs.page &&
            lhs.hitsPerPage == rhs.hitsPerPage
    }
}

extension SearchUserIdsParams: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.query.hashValue)
        hasher.combine(self.clusterName?.hashValue)
        hasher.combine(self.page?.hashValue)
        hasher.combine(self.hitsPerPage?.hashValue)
    }
}
