// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Describes how a destination object should be resolved by means of applying a set of directives.
public struct MappingKitAction: Codable, JSONEncodable {
    /// ID to uniquely identify this action.
    public var id: String?
    /// Whether this action has any effect.
    public var enabled: Bool
    /// Condition which must be satisfied to apply the action. If this evaluates to false, the action is not applied,
    /// and the process attempts to apply the next action, if any.
    public var trigger: String
    public var fieldDirectives: [MappingFieldDirective]

    public init(id: String? = nil, enabled: Bool, trigger: String, fieldDirectives: [MappingFieldDirective]) {
        self.id = id
        self.enabled = enabled
        self.trigger = trigger
        self.fieldDirectives = fieldDirectives
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case enabled
        case trigger
        case fieldDirectives
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.id, forKey: .id)
        try container.encode(self.enabled, forKey: .enabled)
        try container.encode(self.trigger, forKey: .trigger)
        try container.encode(self.fieldDirectives, forKey: .fieldDirectives)
    }
}

extension MappingKitAction: Equatable {
    public static func ==(lhs: MappingKitAction, rhs: MappingKitAction) -> Bool {
        lhs.id == rhs.id &&
            lhs.enabled == rhs.enabled &&
            lhs.trigger == rhs.trigger &&
            lhs.fieldDirectives == rhs.fieldDirectives
    }
}

extension MappingKitAction: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.id?.hashValue)
        hasher.combine(self.enabled.hashValue)
        hasher.combine(self.trigger.hashValue)
        hasher.combine(self.fieldDirectives.hashValue)
    }
}
