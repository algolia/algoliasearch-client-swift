// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public enum RecommendSnippetResult: Codable, JSONEncodable, AbstractEncodable {
    case recommendSnippetResultOption(RecommendSnippetResultOption)
    case dictionaryOfStringToRecommendSnippetResult([String: RecommendSnippetResult])
    case arrayOfRecommendSnippetResult([RecommendSnippetResult])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .recommendSnippetResultOption(value):
            try container.encode(value)
        case let .dictionaryOfStringToRecommendSnippetResult(value):
            try container.encode(value)
        case let .arrayOfRecommendSnippetResult(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(RecommendSnippetResultOption.self) {
            self = .recommendSnippetResultOption(value)
        } else if let value = try? container.decode([String: RecommendSnippetResult].self) {
            self = .dictionaryOfStringToRecommendSnippetResult(value)
        } else if let value = try? container.decode([RecommendSnippetResult].self) {
            self = .arrayOfRecommendSnippetResult(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of RecommendSnippetResult"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .recommendSnippetResultOption(value):
            value as RecommendSnippetResultOption
        case let .dictionaryOfStringToRecommendSnippetResult(value):
            value as [String: RecommendSnippetResult]
        case let .arrayOfRecommendSnippetResult(value):
            value as [RecommendSnippetResult]
        }
    }
}

extension RecommendSnippetResult: Equatable {}
extension RecommendSnippetResult: Hashable {}
