// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct Transformation: Codable, JSONEncodable {
    /// Universally unique identifier (UUID) of a transformation.
    public var transformationID: String
    /// The authentications associated with the current transformation.
    public var authenticationIDs: [String]?
    /// The source code of the transformation.
    public var code: String
    /// The uniquely identified name of your transformation.
    public var name: String
    /// A descriptive name for your transformation of what it does.
    public var description: String?
    /// Date of creation in RFC 3339 format.
    public var createdAt: String
    /// Date of last update in RFC 3339 format.
    public var updatedAt: String?

    public init(
        transformationID: String,
        authenticationIDs: [String]? = nil,
        code: String,
        name: String,
        description: String? = nil,
        createdAt: String,
        updatedAt: String? = nil
    ) {
        self.transformationID = transformationID
        self.authenticationIDs = authenticationIDs
        self.code = code
        self.name = name
        self.description = description
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case transformationID
        case authenticationIDs
        case code
        case name
        case description
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.transformationID, forKey: .transformationID)
        try container.encodeIfPresent(self.authenticationIDs, forKey: .authenticationIDs)
        try container.encode(self.code, forKey: .code)
        try container.encode(self.name, forKey: .name)
        try container.encodeIfPresent(self.description, forKey: .description)
        try container.encode(self.createdAt, forKey: .createdAt)
        try container.encodeIfPresent(self.updatedAt, forKey: .updatedAt)
    }
}

extension Transformation: Equatable {
    public static func ==(lhs: Transformation, rhs: Transformation) -> Bool {
        lhs.transformationID == rhs.transformationID &&
            lhs.authenticationIDs == rhs.authenticationIDs &&
            lhs.code == rhs.code &&
            lhs.name == rhs.name &&
            lhs.description == rhs.description &&
            lhs.createdAt == rhs.createdAt &&
            lhs.updatedAt == rhs.updatedAt
    }
}

extension Transformation: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.transformationID.hashValue)
        hasher.combine(self.authenticationIDs?.hashValue)
        hasher.combine(self.code.hashValue)
        hasher.combine(self.name.hashValue)
        hasher.combine(self.description?.hashValue)
        hasher.combine(self.createdAt.hashValue)
        hasher.combine(self.updatedAt?.hashValue)
    }
}
