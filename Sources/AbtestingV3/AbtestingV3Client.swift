// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

open class AbtestingV3Client {
    private var configuration: AbtestingV3ClientConfiguration
    private var transporter: Transporter

    var appID: String {
        self.configuration.appID
    }

    public init(configuration: AbtestingV3ClientConfiguration, transporter: Transporter) {
        self.configuration = configuration
        self.transporter = transporter
    }

    public convenience init(configuration: AbtestingV3ClientConfiguration) {
        self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
    }

    public convenience init(appID: String, apiKey: String, region: Region?) throws {
        try self.init(configuration: AbtestingV3ClientConfiguration(appID: appID, apiKey: apiKey, region: region))
    }

    open func setClientApiKey(apiKey: String) {
        self.configuration.apiKey = apiKey
        self.transporter.setClientApiKey(apiKey: apiKey)
    }

    /// - parameter addABTestsRequest: (body)
    /// - returns: AbtestingV3ABTestResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func addABTests(
        addABTestsRequest: AbtestingV3AddABTestsRequest,
        requestOptions: RequestOptions? = nil
    ) async throws -> AbtestingV3ABTestResponse {
        let response: Response<AbtestingV3ABTestResponse> = try await addABTestsWithHTTPInfo(
            addABTestsRequest: addABTestsRequest,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Creates a new A/B test.
    // Required API Key ACLs:
    //  - editSettings
    //
    // - parameter addABTestsRequest: (body)
    // - returns: RequestBuilder<AbtestingV3ABTestResponse>

    open func addABTestsWithHTTPInfo(
        addABTestsRequest: AbtestingV3AddABTestsRequest,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3ABTestResponse> {
        let resourcePath = "/3/abtests"
        let body = addABTestsRequest
        let queryParameters: [String: Any?]? = nil

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customDelete(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customDeleteWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customDeleteWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customDelete")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "DELETE",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customGet(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customGetWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customGetWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customGet")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPost(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPostWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPostWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPost")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPut(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPutWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPutWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPut")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "PUT",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter id: (path) Unique A/B test identifier.
    /// - returns: AbtestingV3ABTestResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func deleteABTest(id: Int, requestOptions: RequestOptions? = nil) async throws -> AbtestingV3ABTestResponse {
        let response: Response<AbtestingV3ABTestResponse> = try await deleteABTestWithHTTPInfo(
            id: id,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Deletes an A/B test by its ID.
    // Required API Key ACLs:
    //  - editSettings
    //
    // - parameter id: (path) Unique A/B test identifier.
    // - returns: RequestBuilder<AbtestingV3ABTestResponse>

    open func deleteABTestWithHTTPInfo(
        id: Int,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3ABTestResponse> {
        var resourcePath = "/3/abtests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?]? = nil

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "DELETE",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter estimateABTestRequest: (body)
    /// - returns: AbtestingV3EstimateABTestResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func estimateABTest(
        estimateABTestRequest: AbtestingV3EstimateABTestRequest,
        requestOptions: RequestOptions? = nil
    ) async throws -> AbtestingV3EstimateABTestResponse {
        let response: Response<AbtestingV3EstimateABTestResponse> = try await estimateABTestWithHTTPInfo(
            estimateABTestRequest: estimateABTestRequest,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Given the traffic percentage and the expected effect size, this endpoint estimates the sample size and duration
    // of an A/B test based on historical traffic.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter estimateABTestRequest: (body)
    // - returns: RequestBuilder<AbtestingV3EstimateABTestResponse>

    open func estimateABTestWithHTTPInfo(
        estimateABTestRequest: AbtestingV3EstimateABTestRequest,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3EstimateABTestResponse> {
        let resourcePath = "/3/abtests/estimate"
        let body = estimateABTestRequest
        let queryParameters: [String: Any?]? = nil

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter id: (path) Unique A/B test identifier.
    /// - returns: AbtestingV3ABTest
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getABTest(id: Int, requestOptions: RequestOptions? = nil) async throws -> AbtestingV3ABTest {
        let response: Response<AbtestingV3ABTest> = try await getABTestWithHTTPInfo(
            id: id,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the details for an A/B test by its ID.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter id: (path) Unique A/B test identifier.
    // - returns: RequestBuilder<AbtestingV3ABTest>

    open func getABTestWithHTTPInfo(
        id: Int,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3ABTest> {
        var resourcePath = "/3/abtests/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?]? = nil

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter id: (path) Unique A/B test identifier.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter metric: (query) List of metrics to retrieve. If not specified, all metrics are returned. (optional)
    /// - returns: Timeseries
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTimeseries(
        id: Int,
        startDate: String? = nil,
        endDate: String? = nil,
        metric: [MetricName]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> Timeseries {
        let response: Response<Timeseries> = try await getTimeseriesWithHTTPInfo(
            id: id,
            startDate: startDate,
            endDate: endDate,
            metric: metric,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves timeseries for an A/B test by its ID.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter id: (path) Unique A/B test identifier.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter metric: (query) List of metrics to retrieve. If not specified, all metrics are returned. (optional)
    // - returns: RequestBuilder<Timeseries>

    open func getTimeseriesWithHTTPInfo(
        id: Int,
        startDate: String? = nil,
        endDate: String? = nil,
        metric: [MetricName]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<Timeseries> {
        var resourcePath = "/3/abtests/{id}/timeseries"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "metric": metric?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter indexPrefix: (query) Index name prefix. Only A/B tests for indices starting with this string are
    /// included in the response. (optional)
    /// - parameter indexSuffix: (query) Index name suffix. Only A/B tests for indices ending with this string are
    /// included in the response. (optional)
    /// - parameter direction: (query) Sort order for A/B tests by start date. Use 'asc' for ascending or 'desc' for
    /// descending. Active A/B tests are always listed first.  (optional)
    /// - returns: AbtestingV3ListABTestsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func listABTests(
        offset: Int? = nil,
        limit: Int? = nil,
        indexPrefix: String? = nil,
        indexSuffix: String? = nil,
        direction: AbtestingV3Direction? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AbtestingV3ListABTestsResponse {
        let response: Response<AbtestingV3ListABTestsResponse> = try await listABTestsWithHTTPInfo(
            offset: offset,
            limit: limit,
            indexPrefix: indexPrefix,
            indexSuffix: indexSuffix,
            direction: direction,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Lists all A/B tests you configured for this application.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter indexPrefix: (query) Index name prefix. Only A/B tests for indices starting with this string are
    // included in the response. (optional)
    //
    // - parameter indexSuffix: (query) Index name suffix. Only A/B tests for indices ending with this string are
    // included in the response. (optional)
    //
    // - parameter direction: (query) Sort order for A/B tests by start date. Use 'asc' for ascending or 'desc' for
    // descending. Active A/B tests are always listed first.  (optional)
    // - returns: RequestBuilder<AbtestingV3ListABTestsResponse>

    open func listABTestsWithHTTPInfo(
        offset: Int? = nil,
        limit: Int? = nil,
        indexPrefix: String? = nil,
        indexSuffix: String? = nil,
        direction: AbtestingV3Direction? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3ListABTestsResponse> {
        let resourcePath = "/3/abtests"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "offset": offset?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "indexPrefix": indexPrefix?.encodeToJSON(),
            "indexSuffix": indexSuffix?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter id: (path) Unique A/B test identifier.
    /// - returns: AbtestingV3ABTestResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func stopABTest(id: Int, requestOptions: RequestOptions? = nil) async throws -> AbtestingV3ABTestResponse {
        let response: Response<AbtestingV3ABTestResponse> = try await stopABTestWithHTTPInfo(
            id: id,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Stops an A/B test by its ID.  You can't restart stopped A/B tests.
    // Required API Key ACLs:
    //  - editSettings
    //
    // - parameter id: (path) Unique A/B test identifier.
    // - returns: RequestBuilder<AbtestingV3ABTestResponse>

    open func stopABTestWithHTTPInfo(
        id: Int,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AbtestingV3ABTestResponse> {
        var resourcePath = "/3/abtests/{id}/stop"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?]? = nil

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }
}
