// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Time window by which to filter the observability data.
public struct Window: Codable, JSONEncodable {
    /// Date in RFC 3339 format representing the oldest data in the time window.
    public var startDate: String
    /// Date in RFC 3339 format representing the newest data in the time window.
    public var endDate: String

    public init(startDate: String, endDate: String) {
        self.startDate = startDate
        self.endDate = endDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startDate
        case endDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.startDate, forKey: .startDate)
        try container.encode(self.endDate, forKey: .endDate)
    }
}

extension Window: Equatable {
    public static func ==(lhs: Window, rhs: Window) -> Bool {
        lhs.startDate == rhs.startDate &&
            lhs.endDate == rhs.endDate
    }
}

extension Window: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.startDate.hashValue)
        hasher.combine(self.endDate.hashValue)
    }
}
