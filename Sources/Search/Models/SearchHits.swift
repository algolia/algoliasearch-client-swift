// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct SearchHits<T: Codable>: Codable, JSONEncodable {
    /// Search results (hits).  Hits are records from your index that match the search criteria, augmented with
    /// additional attributes, such as, for highlighting.
    public var hits: [T]
    /// Search query.
    public var query: String
    /// URL-encoded string of all search parameters.
    public var params: String

    public init(hits: [T], query: String, params: String) {
        self.hits = hits
        self.query = query
        self.params = params
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hits
        case query
        case params
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            self.additionalProperties[key] = newValue
        }
    }

    public init(from dictionary: [String: AnyCodable]) throws {
        guard let hits = dictionary["hits"]?.value as? [T] else {
            throw GenericError(description: "Failed to cast")
        }
        self.hits = hits
        guard let query = dictionary["query"]?.value as? String else {
            throw GenericError(description: "Failed to cast")
        }
        self.query = query
        guard let params = dictionary["params"]?.value as? String else {
            throw GenericError(description: "Failed to cast")
        }
        self.params = params
        for (key, value) in dictionary {
            switch key {
            case "hits", "query", "params":
                continue
            default:
                self.additionalProperties[key] = value
            }
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.hits, forKey: .hits)
        try container.encode(self.query, forKey: .query)
        try container.encode(self.params, forKey: .params)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(self.additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.hits = try container.decode([T].self, forKey: .hits)
        self.query = try container.decode(String.self, forKey: .query)
        self.params = try container.decode(String.self, forKey: .params)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("hits")
        nonAdditionalPropertyKeys.insert("query")
        nonAdditionalPropertyKeys.insert("params")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        self.additionalProperties = try additionalPropertiesContainer.decodeMap(
            AnyCodable.self,
            excludedKeys: nonAdditionalPropertyKeys
        )
    }
}

extension SearchHits: Equatable where T: Equatable {
    public static func ==(lhs: SearchHits<T>, rhs: SearchHits<T>) -> Bool {
        lhs.hits == rhs.hits &&
            lhs.query == rhs.query &&
            lhs.params == rhs.params
            && lhs.additionalProperties == rhs.additionalProperties
    }
}

extension SearchHits: Hashable where T: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.hits.hashValue)
        hasher.combine(self.query.hashValue)
        hasher.combine(self.params.hashValue)
        hasher.combine(self.additionalProperties.hashValue)
    }
}
