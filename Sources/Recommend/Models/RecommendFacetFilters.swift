// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Filter the search by facet values, so that only records with the same facet values are retrieved.  **Prefer using
/// the `filters` parameter, which supports all filter types and combinations with boolean operators.**  - `[filter1,
/// filter2]` is interpreted as `filter1 AND filter2`. - `[[filter1, filter2], filter3]` is interpreted as `filter1 OR
/// filter2 AND filter3`. - `facet:-value` is interpreted as `NOT facet:value`.  While it's best to avoid attributes
/// that start with a `-`, you can still filter them by escaping with a backslash: `facet:\\-value`.
public enum RecommendFacetFilters: Codable, JSONEncodable, AbstractEncodable {
    case arrayOfRecommendFacetFilters([RecommendFacetFilters])
    case string(String)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .arrayOfRecommendFacetFilters(value):
            try container.encode(value)
        case let .string(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode([RecommendFacetFilters].self) {
            self = .arrayOfRecommendFacetFilters(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of RecommendFacetFilters"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .arrayOfRecommendFacetFilters(value):
            value as [RecommendFacetFilters]
        case let .string(value):
            value as String
        }
    }
}

extension RecommendFacetFilters: Equatable {}
extension RecommendFacetFilters: Hashable {}
