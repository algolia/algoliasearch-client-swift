// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

open class AnalyticsClient {
    private var configuration: AnalyticsClientConfiguration
    private var transporter: Transporter

    var appID: String {
        self.configuration.appID
    }

    public init(configuration: AnalyticsClientConfiguration, transporter: Transporter) {
        self.configuration = configuration
        self.transporter = transporter
    }

    public convenience init(configuration: AnalyticsClientConfiguration) {
        self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
    }

    public convenience init(appID: String, apiKey: String, region: Region?) throws {
        try self.init(configuration: AnalyticsClientConfiguration(appID: appID, apiKey: apiKey, region: region))
    }

    open func setClientApiKey(apiKey: String) {
        self.configuration.apiKey = apiKey
        self.transporter.setClientApiKey(apiKey: apiKey)
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customDelete(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customDeleteWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customDeleteWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customDelete")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "DELETE",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customGet(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customGetWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customGetWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customGet")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPost(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPostWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPostWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPost")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPut(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPutWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method lets you send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, for example `1/newFeature`.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPutWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: Codable? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPut")
        }

        var resourcePath = "/{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "PUT",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetAddToCartRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getAddToCartRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetAddToCartRateResponse {
        let response: Response<GetAddToCartRateResponse> = try await getAddToCartRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the add-to-cart rate for all your searches with at least one add-to-cart event, including a daily
    // breakdown.  By default, the analyzed period includes the last eight days including the current day.  The rate is
    // the number of add-to-cart conversion events divided by the number of tracked searches. A search is tracked if it
    // returns a queryID (`clickAnalytics` is `true`). This differs from the response's `count`, which shows the overall
    // number of searches, including those where `clickAnalytics` is `false`.  **There's a difference between a 0 and
    // null add-to-cart rate when `clickAnalytics` is enabled:**  - **Null** means there were no queries: since Algolia
    // didn't receive any events, the add-to-cart rate is null. - **0** mean there _were_ queries but no [add-to-cart
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetAddToCartRateResponse>

    open func getAddToCartRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetAddToCartRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getAddToCartRate")
        }

        let resourcePath = "/2/conversions/addToCartRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetAverageClickPositionResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getAverageClickPosition(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetAverageClickPositionResponse {
        let response: Response<GetAverageClickPositionResponse> = try await getAverageClickPositionWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the average click position of your search results, including a daily breakdown.  The average click
    // position is the average of all clicked search result positions. For example, if users only ever click on the
    // first
    // result for any search, the average click position is 1. By default, the analyzed period includes the last eight
    // days including the current day.  An average of `null` when `clickAnalytics` is enabled means Algolia didn't
    // receive any [click events](https://www.algolia.com/doc/guides/sending-events/getting-started) for the queries.
    // The
    // average is `null` until Algolia receives at least one click event.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetAverageClickPositionResponse>

    open func getAverageClickPositionWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetAverageClickPositionResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getAverageClickPosition")
        }

        let resourcePath = "/2/clicks/averageClickPosition"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetClickPositionsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getClickPositions(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetClickPositionsResponse {
        let response: Response<GetClickPositionsResponse> = try await getClickPositionsWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the positions in the search results and their associated number of clicks.  This lets you check how
    // many clicks the first, second, or tenth search results receive.  An average of `0` when `clickAnalytics` is
    // enabled means Algolia didn't receive any [click
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) for the queries.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetClickPositionsResponse>

    open func getClickPositionsWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetClickPositionsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getClickPositions")
        }

        let resourcePath = "/2/clicks/positions"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetClickThroughRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getClickThroughRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetClickThroughRateResponse {
        let response: Response<GetClickThroughRateResponse> = try await getClickThroughRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the click-through rate (CTR) for all your searches with at least one click event, including a daily
    // breakdown.  By default, the analyzed period includes the last eight days including the current day.  **There's a
    // difference between a 0 and null CTR when `clickAnalytics` is enabled:**  - **Null** means there were no queries:
    // since Algolia didn't receive any events, CTR is null. - **0** mean there _were_ queries but no [click
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetClickThroughRateResponse>

    open func getClickThroughRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetClickThroughRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getClickThroughRate")
        }

        let resourcePath = "/2/clicks/clickThroughRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetConversionRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getConversionRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetConversionRateResponse {
        let response: Response<GetConversionRateResponse> = try await getConversionRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the conversion rate (CR) for all your searches with at least one conversion event, including a daily
    // breakdown.  By default, the analyzed period includes the last eight days including the current day.  **There's a
    // difference between a 0 and null CR when `clickAnalytics` is enabled:**  - **Null** means there were no queries:
    // since Algolia didn't receive any events, CR is null. - **0** mean there _were_ queries but no [conversion
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetConversionRateResponse>

    open func getConversionRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetConversionRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getConversionRate")
        }

        let resourcePath = "/2/conversions/conversionRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetNoClickRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getNoClickRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetNoClickRateResponse {
        let response: Response<GetNoClickRateResponse> = try await getNoClickRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the fraction of searches that didn't lead to any click within a time range, including a daily
    // breakdown. It also returns the number of tracked searches and tracked searches without clicks.  By default, the
    // analyzed period includes the last eight days including the current day.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetNoClickRateResponse>

    open func getNoClickRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetNoClickRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getNoClickRate")
        }

        let resourcePath = "/2/searches/noClickRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetNoResultsRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getNoResultsRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetNoResultsRateResponse {
        let response: Response<GetNoResultsRateResponse> = try await getNoResultsRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the fraction of searches that didn't return any results within a time range, including a daily
    // breakdown. It also returns the count of searches and searches without results used to compute the rates.  By
    // default, the analyzed period includes the last eight days including the current day.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetNoResultsRateResponse>

    open func getNoResultsRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetNoResultsRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getNoResultsRate")
        }

        let resourcePath = "/2/searches/noResultRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetPurchaseRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getPurchaseRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetPurchaseRateResponse {
        let response: Response<GetPurchaseRateResponse> = try await getPurchaseRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the purchase rate for all your searches with at least one purchase event, including a daily breakdown. 
    // By default, the analyzed period includes the last eight days including the current day.  The rate is the number
    // of
    // purchase conversion events divided by the number of tracked searches. A search is tracked if it returns a query
    // ID
    // (`clickAnalytics` is `true`). This differs from the response's `count`, which shows the overall number of
    // searches, including those where `clickAnalytics` is `false`.  **There's a difference between a 0 and null
    // purchase
    // rate when `clickAnalytics` is enabled:**  - **Null** means there were no queries: since Algolia didn't receive
    // any
    // events, the purchase rate is null. - **0** mean there _were_ queries but no [purchase conversion
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetPurchaseRateResponse>

    open func getPurchaseRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetPurchaseRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getPurchaseRate")
        }

        let resourcePath = "/2/conversions/purchaseRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetRevenue
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getRevenue(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetRevenue {
        let response: Response<GetRevenue> = try await getRevenueWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves revenue-related metrics, such as the total revenue or the average order value.  To retrieve
    // revenue-related metrics, send purchase events. By default, the analyzed period includes the last eight days
    // including the current day.  Revenue is based on purchase conversion events (a conversion event with an
    // `eventSubtype` attribute of `purchase`). The revenue is the `price` attribute multiplied by the `quantity`
    // attribute for each object in the event's `objectData` array.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetRevenue>

    open func getRevenueWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetRevenue> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getRevenue")
        }

        let resourcePath = "/2/conversions/revenue"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetSearchesCountResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesCount(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesCountResponse {
        let response: Response<GetSearchesCountResponse> = try await getSearchesCountWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the number of searches within a time range, including a daily breakdown.  By default, the analyzed
    // period includes the last eight days including the current day.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetSearchesCountResponse>

    open func getSearchesCountWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesCountResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesCount")
        }

        let resourcePath = "/2/searches/count"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetSearchesNoClicksResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesNoClicks(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesNoClicksResponse {
        let response: Response<GetSearchesNoClicksResponse> = try await getSearchesNoClicksWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the most popular searches that didn't lead to any clicks, from the 1,000 most frequent searches.  For
    // each search, it also returns the number of displayed search results that remained unclicked.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetSearchesNoClicksResponse>

    open func getSearchesNoClicksWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesNoClicksResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesNoClicks")
        }

        let resourcePath = "/2/searches/noClicks"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetSearchesNoResultsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesNoResults(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesNoResultsResponse {
        let response: Response<GetSearchesNoResultsResponse> = try await getSearchesNoResultsWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the 1,000 most frequent searches that produced zero results.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetSearchesNoResultsResponse>

    open func getSearchesNoResultsWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesNoResultsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesNoResults")
        }

        let resourcePath = "/2/searches/noResults"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - returns: GetStatusResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getStatus(index: String, requestOptions: RequestOptions? = nil) async throws -> GetStatusResponse {
        let response: Response<GetStatusResponse> = try await getStatusWithHTTPInfo(
            index: index,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the time when the Analytics data for the specified index was last updated.  If the index has been
    // recently created or no search has been performed yet the updated time is `null`.  The Analytics data is updated
    // every 5&nbsp;minutes.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    // - returns: RequestBuilder<GetStatusResponse>

    open func getStatusWithHTTPInfo(
        index: String,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetStatusResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getStatus")
        }

        let resourcePath = "/2/status"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopCountriesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopCountries(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopCountriesResponse {
        let response: Response<GetTopCountriesResponse> = try await getTopCountriesWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the countries with the most searches in your index.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopCountriesResponse>

    open func getTopCountriesWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopCountriesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopCountries")
        }

        let resourcePath = "/2/countries"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) Search query. (optional)
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopFilterAttributesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFilterAttributes(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFilterAttributesResponse {
        let response: Response<GetTopFilterAttributesResponse> = try await getTopFilterAttributesWithHTTPInfo(
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the 1,000 most frequently used filter attributes.  These are attributes of your records that you
    // included in the `attributesForFaceting` setting.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) Search query. (optional)
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopFilterAttributesResponse>

    open func getTopFilterAttributesWithHTTPInfo(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFilterAttributesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFilterAttributes")
        }

        let resourcePath = "/2/filters"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter attribute: (path) Attribute name.
    /// - parameter index: (query) Index name.
    /// - parameter search: (query) Search query. (optional)
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopFilterForAttributeResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFilterForAttribute(
        attribute: String,
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFilterForAttributeResponse {
        let response: Response<GetTopFilterForAttributeResponse> = try await getTopFilterForAttributeWithHTTPInfo(
            attribute: attribute,
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the 1,000 most frequent filter (facet) values for a filter attribute.  These are attributes of your
    // records that you included in the `attributesForFaceting` setting.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter attribute: (path) Attribute name.
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) Search query. (optional)
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopFilterForAttributeResponse>

    open func getTopFilterForAttributeWithHTTPInfo(
        attribute: String,
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFilterForAttributeResponse> {
        guard !attribute.isEmpty else {
            throw AlgoliaError.invalidArgument("attribute", "getTopFilterForAttribute")
        }

        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFilterForAttribute")
        }

        var resourcePath = "/2/filters/{attribute}"
        let attributePreEscape = "\(APIHelper.mapValueToPathItem(attribute))"
        let attributePostEscape = attributePreEscape
            .addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(
            of: "{attribute}",
            with: attributePostEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) Search query. (optional)
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopFiltersNoResultsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFiltersNoResults(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFiltersNoResultsResponse {
        let response: Response<GetTopFiltersNoResultsResponse> = try await getTopFiltersNoResultsWithHTTPInfo(
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the 1,000 most frequently used filters for a search that didn't return any results.  To get the most
    // frequent searches without results, use the [Retrieve searches without
    // results](https://www.algolia.com/doc/rest-api/analytics/get-searches-no-results) operation.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) Search query. (optional)
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopFiltersNoResultsResponse>

    open func getTopFiltersNoResultsWithHTTPInfo(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFiltersNoResultsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFiltersNoResults")
        }

        let resourcePath = "/2/filters/noResults"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) Search query. (optional)
    /// - parameter clickAnalytics: (query) Whether to include metrics related to click and conversion events in the
    /// response. (optional, default to false)
    /// - parameter revenueAnalytics: (query) Whether to include metrics related to revenue events in the response.
    /// (optional, default to false)
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopHitsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopHits(
        index: String,
        search: String? = nil,
        clickAnalytics: Bool? = nil,
        revenueAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopHitsResponse {
        let response: Response<GetTopHitsResponse> = try await getTopHitsWithHTTPInfo(
            index: index,
            search: search,
            clickAnalytics: clickAnalytics,
            revenueAnalytics: revenueAnalytics,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the object IDs of the 1,000 most frequent search results.  If you set the `clickAnalytics` query
    // parameter to true, the response also includes:  - Tracked searches count. Tracked searches are Search API
    // requests
    // with the `clickAnalytics` parameter set to `true`. This differs from the response's `count`, which shows the
    // overall number of searches, including those where `clickAnalytics` is `false`. - Click count - Click-through rate
    // (CTR) - Conversion count - Conversion rate (CR) - Average click position  If you set the `revenueAnalytics`
    // parameter to `true`, the response also includes:  - Add-to-cart count - Add-to-cart rate (ATCR) - Purchase count
    // -
    // Purchase rate - Revenue details for each currency  **There's a difference between 0% rates and null rates:**  -
    // **Null** means there were no queries: since Algolia didn't receive any events, the rates (CTR, CR, ATCR, purchase
    // rate) are null. - **0% rates** mean there _were_ queries but no [click or conversion
    // events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) Search query. (optional)
    //
    // - parameter clickAnalytics: (query) Whether to include metrics related to click and conversion events in the
    // response. (optional, default to false)
    //
    // - parameter revenueAnalytics: (query) Whether to include metrics related to revenue events in the response.
    // (optional, default to false)
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopHitsResponse>

    open func getTopHitsWithHTTPInfo(
        index: String,
        search: String? = nil,
        clickAnalytics: Bool? = nil,
        revenueAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopHitsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopHits")
        }

        let resourcePath = "/2/hits"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "clickAnalytics": clickAnalytics?.encodeToJSON(),
            "revenueAnalytics": revenueAnalytics?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter clickAnalytics: (query) Whether to include metrics related to click and conversion events in the
    /// response. (optional, default to false)
    /// - parameter revenueAnalytics: (query) Whether to include metrics related to revenue events in the response.
    /// (optional, default to false)
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter orderBy: (query) Attribute by which to order the response items.  If the `clickAnalytics` parameter
    /// is false, only `searchCount` is available.  (optional)
    /// - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
    /// - parameter limit: (query) Number of items to return.  (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetTopSearchesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopSearches(
        index: String,
        clickAnalytics: Bool? = nil,
        revenueAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        orderBy: OrderBy? = nil,
        direction: AnalyticsDirection? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopSearchesResponse {
        let response: Response<GetTopSearchesResponse> = try await getTopSearchesWithHTTPInfo(
            index: index,
            clickAnalytics: clickAnalytics,
            revenueAnalytics: revenueAnalytics,
            startDate: startDate,
            endDate: endDate,
            orderBy: orderBy,
            direction: direction,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the most popular searches. For each search, it also includes the average number of hits.  If you set the
    // `clickAnalytics` query parameter to `true`, the response also includes  - Tracked searches count. Tracked
    // searches
    // are Search API requests with the `clickAnalytics` parameter set to `true`. This differs from the response's
    // `count`, which shows the overall number of searches, including those where `clickAnalytics` is `false`. - Click
    // count - Click-through rate (CTR) - Conversion count - Conversion rate (CR) - Average click position  If you set
    // the `revenueAnalytics` query parameter to `true`, the response also includes:  - Add-to-cart count - Add-to-cart
    // rate (ATCR) - Purchase count - Purchase rate - Revenue details for each currency  **There's a difference between
    // 0% rates and null rates:**  - **Null** means there were no queries: since Algolia didn't receive any events, the
    // rates (CTR, CR, ATCR, purchase rate) are null. - **0% rates** mean there _were_ queries but no [click or
    // conversion events](https://www.algolia.com/doc/guides/sending-events/getting-started) were received.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter clickAnalytics: (query) Whether to include metrics related to click and conversion events in the
    // response. (optional, default to false)
    //
    // - parameter revenueAnalytics: (query) Whether to include metrics related to revenue events in the response.
    // (optional, default to false)
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter orderBy: (query) Attribute by which to order the response items.  If the `clickAnalytics` parameter
    // is false, only `searchCount` is available.  (optional)
    //
    // - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
    //
    // - parameter limit: (query) Number of items to return.  (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return.  (optional, default to 0)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetTopSearchesResponse>

    open func getTopSearchesWithHTTPInfo(
        index: String,
        clickAnalytics: Bool? = nil,
        revenueAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        orderBy: OrderBy? = nil,
        direction: AnalyticsDirection? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopSearchesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopSearches")
        }

        let resourcePath = "/2/searches"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "clickAnalytics": clickAnalytics?.encodeToJSON(),
            "revenueAnalytics": revenueAnalytics?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    /// - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    /// `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    /// data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    /// - returns: GetUsersCountResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getUsersCount(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetUsersCountResponse {
        let response: Response<GetUsersCountResponse> = try await getUsersCountWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Retrieves the number of unique users within a time range, including a daily breakdown.  Since it returns the
    // number of unique users, the sum of the daily values might be different from the total number.  By default:  -
    // Algolia distinguishes search users by their IP address, _unless_ you include a pseudonymous user identifier in
    // your search requests with the `userToken` API parameter or `x-algolia-usertoken` request header. - The analyzed
    // period includes the last eight days including the current day.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter endDate: (query) End date of the period to analyze, in `YYYY-MM-DD` format. (optional)
    //
    // - parameter tags: (query) Tags by which to segment the analytics.  You can combine multiple tags with `OR` and
    // `AND`. Tags must be URL-encoded. For more information, see [Segment your analytics
    // data](https://www.algolia.com/doc/guides/search-analytics/guides/segments).  (optional)
    // - returns: RequestBuilder<GetUsersCountResponse>

    open func getUsersCountWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetUsersCountResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getUsersCount")
        }

        let resourcePath = "/2/users/count"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(
                headers: headers,
                queryParameters: queryParameters
            ) + userRequestOptions
        )
    }
}
