// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public enum AuthInput: Codable, JSONEncodable, AbstractEncodable {
    case authOAuth(AuthOAuth)
    case authGoogleServiceAccount(AuthGoogleServiceAccount)
    case authBasic(AuthBasic)
    case authAPIKey(AuthAPIKey)
    case authAlgolia(AuthAlgolia)
    case authAlgoliaInsights(AuthAlgoliaInsights)
    case dictionaryOfStringToString([String: String])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .authOAuth(value):
            try container.encode(value)
        case let .authGoogleServiceAccount(value):
            try container.encode(value)
        case let .authBasic(value):
            try container.encode(value)
        case let .authAPIKey(value):
            try container.encode(value)
        case let .authAlgolia(value):
            try container.encode(value)
        case let .authAlgoliaInsights(value):
            try container.encode(value)
        case let .dictionaryOfStringToString(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AuthOAuth.self) {
            self = .authOAuth(value)
        } else if let value = try? container.decode(AuthGoogleServiceAccount.self) {
            self = .authGoogleServiceAccount(value)
        } else if let value = try? container.decode(AuthBasic.self) {
            self = .authBasic(value)
        } else if let value = try? container.decode(AuthAPIKey.self) {
            self = .authAPIKey(value)
        } else if let value = try? container.decode(AuthAlgolia.self) {
            self = .authAlgolia(value)
        } else if let value = try? container.decode(AuthAlgoliaInsights.self) {
            self = .authAlgoliaInsights(value)
        } else if let value = try? container.decode([String: String].self) {
            self = .dictionaryOfStringToString(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of AuthInput")
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .authOAuth(value):
            value as AuthOAuth
        case let .authGoogleServiceAccount(value):
            value as AuthGoogleServiceAccount
        case let .authBasic(value):
            value as AuthBasic
        case let .authAPIKey(value):
            value as AuthAPIKey
        case let .authAlgolia(value):
            value as AuthAlgolia
        case let .authAlgoliaInsights(value):
            value as AuthAlgoliaInsights
        case let .dictionaryOfStringToString(value):
            value as [String: String]
        }
    }
}

extension AuthInput: Equatable {}
extension AuthInput: Hashable {}
