// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct RecommendTimeRange: Codable, JSONEncodable {
    /// When the rule should start to be active, in Unix epoch time.
    public var from: Int64
    /// When the rule should stop to be active, in Unix epoch time.
    public var until: Int64

    public init(from: Int64, until: Int64) {
        self.from = from
        self.until = until
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case from
        case until
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.from, forKey: .from)
        try container.encode(self.until, forKey: .until)
    }
}

extension RecommendTimeRange: Equatable {
    public static func ==(lhs: RecommendTimeRange, rhs: RecommendTimeRange) -> Bool {
        lhs.from == rhs.from &&
            lhs.until == rhs.until
    }
}

extension RecommendTimeRange: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.from.hashValue)
        hasher.combine(self.until.hashValue)
    }
}
