// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct DockerStreams: Codable, JSONEncodable {
    /// The name of the stream to fetch the data from (e.g. table name).
    public var name: String
    /// The properties of the stream to select (e.g. column).
    public var properties: [String]?
    public var syncMode: DockerStreamsSyncMode

    public init(name: String, properties: [String]? = nil, syncMode: DockerStreamsSyncMode) {
        self.name = name
        self.properties = properties
        self.syncMode = syncMode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case properties
        case syncMode
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.name, forKey: .name)
        try container.encodeIfPresent(self.properties, forKey: .properties)
        try container.encode(self.syncMode, forKey: .syncMode)
    }
}

extension DockerStreams: Equatable {
    public static func ==(lhs: DockerStreams, rhs: DockerStreams) -> Bool {
        lhs.name == rhs.name &&
            lhs.properties == rhs.properties &&
            lhs.syncMode == rhs.syncMode
    }
}

extension DockerStreams: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.name.hashValue)
        hasher.combine(self.properties?.hashValue)
        hasher.combine(self.syncMode.hashValue)
    }
}
