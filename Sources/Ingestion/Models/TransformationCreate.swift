// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// API request body for creating a transformation.
public struct TransformationCreate: Codable, JSONEncodable {
    /// The source code of the transformation.
    public var code: String
    /// The uniquely identified name of your transformation.
    public var name: String
    /// A descriptive name for your transformation of what it does.
    public var description: String?
    /// The authentications associated with the current transformation.
    public var authenticationIDs: [String]?

    public init(code: String, name: String, description: String? = nil, authenticationIDs: [String]? = nil) {
        self.code = code
        self.name = name
        self.description = description
        self.authenticationIDs = authenticationIDs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case name
        case description
        case authenticationIDs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.code, forKey: .code)
        try container.encode(self.name, forKey: .name)
        try container.encodeIfPresent(self.description, forKey: .description)
        try container.encodeIfPresent(self.authenticationIDs, forKey: .authenticationIDs)
    }
}

extension TransformationCreate: Equatable {
    public static func ==(lhs: TransformationCreate, rhs: TransformationCreate) -> Bool {
        lhs.code == rhs.code &&
            lhs.name == rhs.name &&
            lhs.description == rhs.description &&
            lhs.authenticationIDs == rhs.authenticationIDs
    }
}

extension TransformationCreate: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.code.hashValue)
        hasher.combine(self.name.hashValue)
        hasher.combine(self.description?.hashValue)
        hasher.combine(self.authenticationIDs?.hashValue)
    }
}
