// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct SourceGA4BigQueryExport: Codable, JSONEncodable {
    /// GCP project ID that the BigQuery export writes to.
    public var projectID: String
    /// BigQuery dataset ID that the BigQuery export writes to.
    public var datasetID: String
    /// Prefix of the tables that the BigQuery Export writes to.
    public var tablePrefix: String

    public init(projectID: String, datasetID: String, tablePrefix: String) {
        self.projectID = projectID
        self.datasetID = datasetID
        self.tablePrefix = tablePrefix
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectID
        case datasetID
        case tablePrefix
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.projectID, forKey: .projectID)
        try container.encode(self.datasetID, forKey: .datasetID)
        try container.encode(self.tablePrefix, forKey: .tablePrefix)
    }
}

extension SourceGA4BigQueryExport: Equatable {
    public static func ==(lhs: SourceGA4BigQueryExport, rhs: SourceGA4BigQueryExport) -> Bool {
        lhs.projectID == rhs.projectID &&
            lhs.datasetID == rhs.datasetID &&
            lhs.tablePrefix == rhs.tablePrefix
    }
}

extension SourceGA4BigQueryExport: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.projectID.hashValue)
        hasher.combine(self.datasetID.hashValue)
        hasher.combine(self.tablePrefix.hashValue)
    }
}
