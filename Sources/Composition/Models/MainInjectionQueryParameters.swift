// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct MainInjectionQueryParameters: Codable, JSONEncodable {
    /// Whether to support phrase matching and excluding words from search queries Use the `advancedSyntaxFeatures`
    /// parameter to control which feature is supported.
    public var advancedSyntax: Bool?
    /// Advanced search syntax features you want to support - `exactPhrase`.   Phrases in quotes must match exactly.  
    /// For example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\" -
    /// `excludeWords`.   Query words prefixed with a `-` must not occur in a record.   For example, `search -engine`
    /// matches records that contain \"search\" but not \"engine\" This setting only has an effect if `advancedSyntax`
    /// is true.
    public var advancedSyntaxFeatures: [CompositionAdvancedSyntaxFeatures]?
    /// Whether to allow typos on numbers in the search query Turn off this setting to reduce the number of irrelevant
    /// matches when searching in large sets of similar numbers.
    public var allowTyposOnNumericTokens: Bool?
    /// Determine which plurals and synonyms should be considered an exact matches By default, Algolia treats singular
    /// and plural forms of a word, and single-word synonyms, as
    /// [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact)
    /// matches when searching. For example - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and
    /// \"swimwear\" are treated the same (if they are [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms))
    /// - `ignorePlurals`.   Plurals and similar declensions added by the `ignorePlurals` setting are considered exact
    /// matches - `singleWordSynonym`.   Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches -
    /// `multiWordsSynonym`.   Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.
    public var alternativesAsExact: [CompositionAlternativesAsExact]?
    /// Whether this search will be included in Analytics.
    public var analytics: Bool?
    /// Whether the best matching attribute should be determined by minimum proximity This setting only affects ranking
    /// if the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching
    /// attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute
    /// is determined by the order in the `searchableAttributes` setting.
    public var attributeCriteriaComputedByMinProximity: Bool?
    /// Attributes to highlight By default, all searchable attributes are highlighted. Use `*` to highlight all
    /// attributes or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive With
    /// highlighting, strings that match the search query are surrounded by HTML tags defined by `highlightPreTag` and
    /// `highlightPostTag`. You can use this to visually highlight matching parts of a search query in your UI For more
    /// information, see [Highlighting and snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js).
    public var attributesToHighlight: [String]?
    /// Attributes to include in the API response To reduce the size of your response, you can retrieve only some of the
    /// attributes. Attribute names are case-sensitive - `*` retrieves all attributes, except attributes included in the
    /// `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one,
    /// prefix the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID`
    /// attribute is always included.
    public var attributesToRetrieve: [String]?
    /// Attributes for which to enable snippets. Attribute names are case-sensitive Snippets provide additional context
    /// to matched words. If you enable snippets, they include 10 words, including the matched word. The matched word
    /// will also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following
    /// notation: `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
    public var attributesToSnippet: [String]?
    /// Whether to include a `queryID` attribute in the response The query ID is a unique identifier for a search query
    /// and is required for tracking [click and conversion
    /// events](https://www.algolia.com/doc/guides/sending-events/getting-started).
    public var clickAnalytics: Bool?
    /// Whether to split compound words in the query into their building blocks For more information, see [Word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).
    /// Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian.
    /// Decompounding doesn't work for words with [non-spacing mark Unicode
    /// characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be
    /// decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).
    public var decompoundQuery: Bool?
    /// Searchable attributes for which you want to [turn off the Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
    /// Attribute names are case-sensitive This can be useful for attributes with long values, where the likelihood of
    /// an exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these
    /// attributes favors exact matching on other attributes. This reduces the impact of individual attributes with a
    /// lot of content on ranking.
    public var disableExactOnAttributes: [String]?
    /// Attributes for which you want to turn off [typo
    /// tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance).
    /// Attribute names are case-sensitive Returning only exact matches can help when - [Searching in hyphenated attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes).
    /// - Reducing the number of matches when you have too many.   This can happen with attributes that are long blocks
    /// of text, such as product descriptions Consider alternatives such as `disableTypoToleranceOnWords` or adding
    /// synonyms if your attributes have intentional unusual spellings that might look like typos.
    public var disableTypoToleranceOnAttributes: [String]?
    public var distinct: CompositionDistinct?
    /// Whether to enable A/B testing for this search.
    public var enableABTest: Bool?
    /// Whether to enable Personalization.
    public var enablePersonalization: Bool?
    /// Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking) This
    /// setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
    public var enableReRanking: Bool?
    /// Whether to enable rules.
    public var enableRules: Bool?
    public var exactOnSingleWordQuery: CompositionExactOnSingleWordQuery?
    public var facetFilters: CompositionFacetFilters?
    /// Filter expression to only include items that match the filter criteria in the response.  You can use these
    /// filter expressions:  - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`,
    /// `!=`, `>`, `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and
    /// upper limits of the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet
    /// attribute (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>`
    /// (case-sensitive). - **Boolean filters.** `<facet>: true | false`.  You can combine filters with `AND`, `OR`, and
    /// `NOT` operators with the following restrictions:  - You can only combine filters of the same type with `OR`.  
    /// **Not supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters.   **Not
    /// supported:** `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`.   **Not
    /// supported:** `facet:value OR (facet:value AND facet:value)`  Use quotes around your filters, if the facet
    /// attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an
    /// array, the filter matches if it matches at least one element of the array.  For more information, see
    /// [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering).
    public var filters: String?
    /// Whether the search response should include detailed ranking information.
    public var getRankingInfo: Bool?
    /// HTML tag to insert after the highlighted parts in all highlighted results and snippets.
    public var highlightPostTag: String?
    /// HTML tag to insert before the highlighted parts in all highlighted results and snippets.
    public var highlightPreTag: String?
    public var ignorePlurals: CompositionIgnorePlurals?
    /// Maximum number of facet values to return when [searching for facet
    /// values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
    public var maxFacetHits: Int?
    /// Minimum proximity score for two matching words This adjusts the [Proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)
    /// by equally scoring matches that are farther apart For example, if `minProximity` is 2, neighboring matches and
    /// matches with one word between them would have the same score.
    public var minProximity: Int?
    /// Minimum number of characters a word in the search query must contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
    public var minWordSizefor1Typo: Int?
    /// Minimum number of characters a word in the search query must contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
    public var minWordSizefor2Typos: Int?
    /// ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to
    /// keyword searches) - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets
    /// `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and
    /// `analyticsTags`.
    public var naturalLanguages: [CompositionSupportedLanguage]?
    public var numericFilters: CompositionNumericFilters?
    public var optionalFilters: CompositionOptionalFilters?
    public var optionalWords: CompositionOptionalWords?
    /// Whether to include this search when calculating processing-time percentiles.
    public var percentileComputation: Bool?
    /// Impact that Personalization should have on this search The higher this value is, the more Personalization
    /// determines the ranking compared to other factors. For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
    public var personalizationImpact: Int?
    /// Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection
    /// dictionaries  This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals`
    /// settings. This setting also sets a dictionary for word detection in the logogram-based [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)
    /// languages. To support this, you must place the CJK language **first**  **You should always specify a query
    /// language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages),
    /// or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to
    /// unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations).
    public var queryLanguages: [CompositionSupportedLanguage]?
    public var queryType: CompositionQueryType?
    public var removeStopWords: CompositionRemoveStopWords?
    public var removeWordsIfNoResults: CompositionRemoveWordsIfNoResults?
    /// Whether to replace a highlighted word with the matched synonym By default, the original words are highlighted
    /// even if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records
    /// matching either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are
    /// highlighted With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records,
    /// but all occurrences of \"house\" are replaced by \"home\" in the highlighted response.
    public var replaceSynonymsInHighlight: Bool?
    /// Properties to include in the API response of search and browse requests By default, all response properties are
    /// included. To reduce the response size, you can select which properties should be included An empty list may lead
    /// to an empty API response (except properties you can't exclude) You can't exclude these properties: `message`,
    /// `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true Your search
    /// depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also
    /// depend on other properties, for example, for pagination. Before restricting the response size, check the impact
    /// on your search experience.
    public var responseFields: [String]?
    /// Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By
    /// default, all items are highlighted and snippeted.
    public var restrictHighlightAndSnippetArrays: Bool?
    /// Restricts a search to a subset of your searchable attributes. Attribute names are case-sensitive.
    public var restrictSearchableAttributes: [String]?
    /// Assigns a rule context to the search query [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
    /// are strings that you can use to trigger matching rules.
    public var ruleContexts: [String]?
    /// String used as an ellipsis indicator when a snippet is truncated.
    public var snippetEllipsisText: String?
    /// Whether to take into account an index's synonyms for this search.
    public var synonyms: Bool?
    public var typoTolerance: CompositionTypoTolerance?
    /// Whether faceting should be applied after deduplication with `distinct` This leads to accurate facet counts when
    /// using faceting in combination with `distinct`. It's usually better to use `afterDistinct` modifiers in the
    /// `attributesForFaceting` setting, as `facetingAfterDistinct` only computes correct facet counts if all records
    /// have the same facet values for the `attributeForDistinct`.
    public var facetingAfterDistinct: Bool?
    /// Facets for which to retrieve facet values that match the search criteria and the number of matching facet values
    /// To retrieve all facets, use the wildcard character `*`. For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
    public var facets: [String]?
    /// Number of hits per page.
    public var hitsPerPage: Int?
    /// Maximum number of facet values to return for each facet.
    public var maxValuesPerFacet: Int?
    /// Order in which to retrieve facet values - `count`.   Facet values are retrieved by decreasing count.   The count
    /// is the number of matching records containing this facet value - `alpha`.   Retrieve facet values alphabetically
    /// This setting doesn't influence how facet values are displayed in your UI (see `renderingContent`). For more
    /// information, see [facet value
    /// display](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/facet-display/js).
    public var sortFacetValuesBy: String?
    /// Whether to sum all filter scores If true, all filter scores are summed. Otherwise, the maximum filter score is
    /// kept. For more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
    public var sumOrFiltersScores: Bool?

    public init(
        advancedSyntax: Bool? = nil,
        advancedSyntaxFeatures: [CompositionAdvancedSyntaxFeatures]? = nil,
        allowTyposOnNumericTokens: Bool? = nil,
        alternativesAsExact: [CompositionAlternativesAsExact]? = nil,
        analytics: Bool? = nil,
        attributeCriteriaComputedByMinProximity: Bool? = nil,
        attributesToHighlight: [String]? = nil,
        attributesToRetrieve: [String]? = nil,
        attributesToSnippet: [String]? = nil,
        clickAnalytics: Bool? = nil,
        decompoundQuery: Bool? = nil,
        disableExactOnAttributes: [String]? = nil,
        disableTypoToleranceOnAttributes: [String]? = nil,
        distinct: CompositionDistinct? = nil,
        enableABTest: Bool? = nil,
        enablePersonalization: Bool? = nil,
        enableReRanking: Bool? = nil,
        enableRules: Bool? = nil,
        exactOnSingleWordQuery: CompositionExactOnSingleWordQuery? = nil,
        facetFilters: CompositionFacetFilters? = nil,
        filters: String? = nil,
        getRankingInfo: Bool? = nil,
        highlightPostTag: String? = nil,
        highlightPreTag: String? = nil,
        ignorePlurals: CompositionIgnorePlurals? = nil,
        maxFacetHits: Int? = nil,
        minProximity: Int? = nil,
        minWordSizefor1Typo: Int? = nil,
        minWordSizefor2Typos: Int? = nil,
        naturalLanguages: [CompositionSupportedLanguage]? = nil,
        numericFilters: CompositionNumericFilters? = nil,
        optionalFilters: CompositionOptionalFilters? = nil,
        optionalWords: CompositionOptionalWords? = nil,
        percentileComputation: Bool? = nil,
        personalizationImpact: Int? = nil,
        queryLanguages: [CompositionSupportedLanguage]? = nil,
        queryType: CompositionQueryType? = nil,
        removeStopWords: CompositionRemoveStopWords? = nil,
        removeWordsIfNoResults: CompositionRemoveWordsIfNoResults? = nil,
        replaceSynonymsInHighlight: Bool? = nil,
        responseFields: [String]? = nil,
        restrictHighlightAndSnippetArrays: Bool? = nil,
        restrictSearchableAttributes: [String]? = nil,
        ruleContexts: [String]? = nil,
        snippetEllipsisText: String? = nil,
        synonyms: Bool? = nil,
        typoTolerance: CompositionTypoTolerance? = nil,
        facetingAfterDistinct: Bool? = nil,
        facets: [String]? = nil,
        hitsPerPage: Int? = nil,
        maxValuesPerFacet: Int? = nil,
        sortFacetValuesBy: String? = nil,
        sumOrFiltersScores: Bool? = nil
    ) {
        self.advancedSyntax = advancedSyntax
        self.advancedSyntaxFeatures = advancedSyntaxFeatures
        self.allowTyposOnNumericTokens = allowTyposOnNumericTokens
        self.alternativesAsExact = alternativesAsExact
        self.analytics = analytics
        self.attributeCriteriaComputedByMinProximity = attributeCriteriaComputedByMinProximity
        self.attributesToHighlight = attributesToHighlight
        self.attributesToRetrieve = attributesToRetrieve
        self.attributesToSnippet = attributesToSnippet
        self.clickAnalytics = clickAnalytics
        self.decompoundQuery = decompoundQuery
        self.disableExactOnAttributes = disableExactOnAttributes
        self.disableTypoToleranceOnAttributes = disableTypoToleranceOnAttributes
        self.distinct = distinct
        self.enableABTest = enableABTest
        self.enablePersonalization = enablePersonalization
        self.enableReRanking = enableReRanking
        self.enableRules = enableRules
        self.exactOnSingleWordQuery = exactOnSingleWordQuery
        self.facetFilters = facetFilters
        self.filters = filters
        self.getRankingInfo = getRankingInfo
        self.highlightPostTag = highlightPostTag
        self.highlightPreTag = highlightPreTag
        self.ignorePlurals = ignorePlurals
        self.maxFacetHits = maxFacetHits
        self.minProximity = minProximity
        self.minWordSizefor1Typo = minWordSizefor1Typo
        self.minWordSizefor2Typos = minWordSizefor2Typos
        self.naturalLanguages = naturalLanguages
        self.numericFilters = numericFilters
        self.optionalFilters = optionalFilters
        self.optionalWords = optionalWords
        self.percentileComputation = percentileComputation
        self.personalizationImpact = personalizationImpact
        self.queryLanguages = queryLanguages
        self.queryType = queryType
        self.removeStopWords = removeStopWords
        self.removeWordsIfNoResults = removeWordsIfNoResults
        self.replaceSynonymsInHighlight = replaceSynonymsInHighlight
        self.responseFields = responseFields
        self.restrictHighlightAndSnippetArrays = restrictHighlightAndSnippetArrays
        self.restrictSearchableAttributes = restrictSearchableAttributes
        self.ruleContexts = ruleContexts
        self.snippetEllipsisText = snippetEllipsisText
        self.synonyms = synonyms
        self.typoTolerance = typoTolerance
        self.facetingAfterDistinct = facetingAfterDistinct
        self.facets = facets
        self.hitsPerPage = hitsPerPage
        self.maxValuesPerFacet = maxValuesPerFacet
        self.sortFacetValuesBy = sortFacetValuesBy
        self.sumOrFiltersScores = sumOrFiltersScores
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case advancedSyntax
        case advancedSyntaxFeatures
        case allowTyposOnNumericTokens
        case alternativesAsExact
        case analytics
        case attributeCriteriaComputedByMinProximity
        case attributesToHighlight
        case attributesToRetrieve
        case attributesToSnippet
        case clickAnalytics
        case decompoundQuery
        case disableExactOnAttributes
        case disableTypoToleranceOnAttributes
        case distinct
        case enableABTest
        case enablePersonalization
        case enableReRanking
        case enableRules
        case exactOnSingleWordQuery
        case facetFilters
        case filters
        case getRankingInfo
        case highlightPostTag
        case highlightPreTag
        case ignorePlurals
        case maxFacetHits
        case minProximity
        case minWordSizefor1Typo
        case minWordSizefor2Typos
        case naturalLanguages
        case numericFilters
        case optionalFilters
        case optionalWords
        case percentileComputation
        case personalizationImpact
        case queryLanguages
        case queryType
        case removeStopWords
        case removeWordsIfNoResults
        case replaceSynonymsInHighlight
        case responseFields
        case restrictHighlightAndSnippetArrays
        case restrictSearchableAttributes
        case ruleContexts
        case snippetEllipsisText
        case synonyms
        case typoTolerance
        case facetingAfterDistinct
        case facets
        case hitsPerPage
        case maxValuesPerFacet
        case sortFacetValuesBy
        case sumOrFiltersScores
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.advancedSyntax, forKey: .advancedSyntax)
        try container.encodeIfPresent(self.advancedSyntaxFeatures, forKey: .advancedSyntaxFeatures)
        try container.encodeIfPresent(self.allowTyposOnNumericTokens, forKey: .allowTyposOnNumericTokens)
        try container.encodeIfPresent(self.alternativesAsExact, forKey: .alternativesAsExact)
        try container.encodeIfPresent(self.analytics, forKey: .analytics)
        try container.encodeIfPresent(
            self.attributeCriteriaComputedByMinProximity,
            forKey: .attributeCriteriaComputedByMinProximity
        )
        try container.encodeIfPresent(self.attributesToHighlight, forKey: .attributesToHighlight)
        try container.encodeIfPresent(self.attributesToRetrieve, forKey: .attributesToRetrieve)
        try container.encodeIfPresent(self.attributesToSnippet, forKey: .attributesToSnippet)
        try container.encodeIfPresent(self.clickAnalytics, forKey: .clickAnalytics)
        try container.encodeIfPresent(self.decompoundQuery, forKey: .decompoundQuery)
        try container.encodeIfPresent(self.disableExactOnAttributes, forKey: .disableExactOnAttributes)
        try container.encodeIfPresent(self.disableTypoToleranceOnAttributes, forKey: .disableTypoToleranceOnAttributes)
        try container.encodeIfPresent(self.distinct, forKey: .distinct)
        try container.encodeIfPresent(self.enableABTest, forKey: .enableABTest)
        try container.encodeIfPresent(self.enablePersonalization, forKey: .enablePersonalization)
        try container.encodeIfPresent(self.enableReRanking, forKey: .enableReRanking)
        try container.encodeIfPresent(self.enableRules, forKey: .enableRules)
        try container.encodeIfPresent(self.exactOnSingleWordQuery, forKey: .exactOnSingleWordQuery)
        try container.encodeIfPresent(self.facetFilters, forKey: .facetFilters)
        try container.encodeIfPresent(self.filters, forKey: .filters)
        try container.encodeIfPresent(self.getRankingInfo, forKey: .getRankingInfo)
        try container.encodeIfPresent(self.highlightPostTag, forKey: .highlightPostTag)
        try container.encodeIfPresent(self.highlightPreTag, forKey: .highlightPreTag)
        try container.encodeIfPresent(self.ignorePlurals, forKey: .ignorePlurals)
        try container.encodeIfPresent(self.maxFacetHits, forKey: .maxFacetHits)
        try container.encodeIfPresent(self.minProximity, forKey: .minProximity)
        try container.encodeIfPresent(self.minWordSizefor1Typo, forKey: .minWordSizefor1Typo)
        try container.encodeIfPresent(self.minWordSizefor2Typos, forKey: .minWordSizefor2Typos)
        try container.encodeIfPresent(self.naturalLanguages, forKey: .naturalLanguages)
        try container.encodeIfPresent(self.numericFilters, forKey: .numericFilters)
        try container.encodeIfPresent(self.optionalFilters, forKey: .optionalFilters)
        try container.encodeIfPresent(self.optionalWords, forKey: .optionalWords)
        try container.encodeIfPresent(self.percentileComputation, forKey: .percentileComputation)
        try container.encodeIfPresent(self.personalizationImpact, forKey: .personalizationImpact)
        try container.encodeIfPresent(self.queryLanguages, forKey: .queryLanguages)
        try container.encodeIfPresent(self.queryType, forKey: .queryType)
        try container.encodeIfPresent(self.removeStopWords, forKey: .removeStopWords)
        try container.encodeIfPresent(self.removeWordsIfNoResults, forKey: .removeWordsIfNoResults)
        try container.encodeIfPresent(self.replaceSynonymsInHighlight, forKey: .replaceSynonymsInHighlight)
        try container.encodeIfPresent(self.responseFields, forKey: .responseFields)
        try container.encodeIfPresent(
            self.restrictHighlightAndSnippetArrays,
            forKey: .restrictHighlightAndSnippetArrays
        )
        try container.encodeIfPresent(self.restrictSearchableAttributes, forKey: .restrictSearchableAttributes)
        try container.encodeIfPresent(self.ruleContexts, forKey: .ruleContexts)
        try container.encodeIfPresent(self.snippetEllipsisText, forKey: .snippetEllipsisText)
        try container.encodeIfPresent(self.synonyms, forKey: .synonyms)
        try container.encodeIfPresent(self.typoTolerance, forKey: .typoTolerance)
        try container.encodeIfPresent(self.facetingAfterDistinct, forKey: .facetingAfterDistinct)
        try container.encodeIfPresent(self.facets, forKey: .facets)
        try container.encodeIfPresent(self.hitsPerPage, forKey: .hitsPerPage)
        try container.encodeIfPresent(self.maxValuesPerFacet, forKey: .maxValuesPerFacet)
        try container.encodeIfPresent(self.sortFacetValuesBy, forKey: .sortFacetValuesBy)
        try container.encodeIfPresent(self.sumOrFiltersScores, forKey: .sumOrFiltersScores)
    }
}

extension MainInjectionQueryParameters: Equatable {
    public static func ==(lhs: MainInjectionQueryParameters, rhs: MainInjectionQueryParameters) -> Bool {
        lhs.advancedSyntax == rhs.advancedSyntax &&
            lhs.advancedSyntaxFeatures == rhs.advancedSyntaxFeatures &&
            lhs.allowTyposOnNumericTokens == rhs.allowTyposOnNumericTokens &&
            lhs.alternativesAsExact == rhs.alternativesAsExact &&
            lhs.analytics == rhs.analytics &&
            lhs.attributeCriteriaComputedByMinProximity == rhs.attributeCriteriaComputedByMinProximity &&
            lhs.attributesToHighlight == rhs.attributesToHighlight &&
            lhs.attributesToRetrieve == rhs.attributesToRetrieve &&
            lhs.attributesToSnippet == rhs.attributesToSnippet &&
            lhs.clickAnalytics == rhs.clickAnalytics &&
            lhs.decompoundQuery == rhs.decompoundQuery &&
            lhs.disableExactOnAttributes == rhs.disableExactOnAttributes &&
            lhs.disableTypoToleranceOnAttributes == rhs.disableTypoToleranceOnAttributes &&
            lhs.distinct == rhs.distinct &&
            lhs.enableABTest == rhs.enableABTest &&
            lhs.enablePersonalization == rhs.enablePersonalization &&
            lhs.enableReRanking == rhs.enableReRanking &&
            lhs.enableRules == rhs.enableRules &&
            lhs.exactOnSingleWordQuery == rhs.exactOnSingleWordQuery &&
            lhs.facetFilters == rhs.facetFilters &&
            lhs.filters == rhs.filters &&
            lhs.getRankingInfo == rhs.getRankingInfo &&
            lhs.highlightPostTag == rhs.highlightPostTag &&
            lhs.highlightPreTag == rhs.highlightPreTag &&
            lhs.ignorePlurals == rhs.ignorePlurals &&
            lhs.maxFacetHits == rhs.maxFacetHits &&
            lhs.minProximity == rhs.minProximity &&
            lhs.minWordSizefor1Typo == rhs.minWordSizefor1Typo &&
            lhs.minWordSizefor2Typos == rhs.minWordSizefor2Typos &&
            lhs.naturalLanguages == rhs.naturalLanguages &&
            lhs.numericFilters == rhs.numericFilters &&
            lhs.optionalFilters == rhs.optionalFilters &&
            lhs.optionalWords == rhs.optionalWords &&
            lhs.percentileComputation == rhs.percentileComputation &&
            lhs.personalizationImpact == rhs.personalizationImpact &&
            lhs.queryLanguages == rhs.queryLanguages &&
            lhs.queryType == rhs.queryType &&
            lhs.removeStopWords == rhs.removeStopWords &&
            lhs.removeWordsIfNoResults == rhs.removeWordsIfNoResults &&
            lhs.replaceSynonymsInHighlight == rhs.replaceSynonymsInHighlight &&
            lhs.responseFields == rhs.responseFields &&
            lhs.restrictHighlightAndSnippetArrays == rhs.restrictHighlightAndSnippetArrays &&
            lhs.restrictSearchableAttributes == rhs.restrictSearchableAttributes &&
            lhs.ruleContexts == rhs.ruleContexts &&
            lhs.snippetEllipsisText == rhs.snippetEllipsisText &&
            lhs.synonyms == rhs.synonyms &&
            lhs.typoTolerance == rhs.typoTolerance &&
            lhs.facetingAfterDistinct == rhs.facetingAfterDistinct &&
            lhs.facets == rhs.facets &&
            lhs.hitsPerPage == rhs.hitsPerPage &&
            lhs.maxValuesPerFacet == rhs.maxValuesPerFacet &&
            lhs.sortFacetValuesBy == rhs.sortFacetValuesBy &&
            lhs.sumOrFiltersScores == rhs.sumOrFiltersScores
    }
}

extension MainInjectionQueryParameters: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.advancedSyntax?.hashValue)
        hasher.combine(self.advancedSyntaxFeatures?.hashValue)
        hasher.combine(self.allowTyposOnNumericTokens?.hashValue)
        hasher.combine(self.alternativesAsExact?.hashValue)
        hasher.combine(self.analytics?.hashValue)
        hasher.combine(self.attributeCriteriaComputedByMinProximity?.hashValue)
        hasher.combine(self.attributesToHighlight?.hashValue)
        hasher.combine(self.attributesToRetrieve?.hashValue)
        hasher.combine(self.attributesToSnippet?.hashValue)
        hasher.combine(self.clickAnalytics?.hashValue)
        hasher.combine(self.decompoundQuery?.hashValue)
        hasher.combine(self.disableExactOnAttributes?.hashValue)
        hasher.combine(self.disableTypoToleranceOnAttributes?.hashValue)
        hasher.combine(self.distinct?.hashValue)
        hasher.combine(self.enableABTest?.hashValue)
        hasher.combine(self.enablePersonalization?.hashValue)
        hasher.combine(self.enableReRanking?.hashValue)
        hasher.combine(self.enableRules?.hashValue)
        hasher.combine(self.exactOnSingleWordQuery?.hashValue)
        hasher.combine(self.facetFilters?.hashValue)
        hasher.combine(self.filters?.hashValue)
        hasher.combine(self.getRankingInfo?.hashValue)
        hasher.combine(self.highlightPostTag?.hashValue)
        hasher.combine(self.highlightPreTag?.hashValue)
        hasher.combine(self.ignorePlurals?.hashValue)
        hasher.combine(self.maxFacetHits?.hashValue)
        hasher.combine(self.minProximity?.hashValue)
        hasher.combine(self.minWordSizefor1Typo?.hashValue)
        hasher.combine(self.minWordSizefor2Typos?.hashValue)
        hasher.combine(self.naturalLanguages?.hashValue)
        hasher.combine(self.numericFilters?.hashValue)
        hasher.combine(self.optionalFilters?.hashValue)
        hasher.combine(self.optionalWords?.hashValue)
        hasher.combine(self.percentileComputation?.hashValue)
        hasher.combine(self.personalizationImpact?.hashValue)
        hasher.combine(self.queryLanguages?.hashValue)
        hasher.combine(self.queryType?.hashValue)
        hasher.combine(self.removeStopWords?.hashValue)
        hasher.combine(self.removeWordsIfNoResults?.hashValue)
        hasher.combine(self.replaceSynonymsInHighlight?.hashValue)
        hasher.combine(self.responseFields?.hashValue)
        hasher.combine(self.restrictHighlightAndSnippetArrays?.hashValue)
        hasher.combine(self.restrictSearchableAttributes?.hashValue)
        hasher.combine(self.ruleContexts?.hashValue)
        hasher.combine(self.snippetEllipsisText?.hashValue)
        hasher.combine(self.synonyms?.hashValue)
        hasher.combine(self.typoTolerance?.hashValue)
        hasher.combine(self.facetingAfterDistinct?.hashValue)
        hasher.combine(self.facets?.hashValue)
        hasher.combine(self.hitsPerPage?.hashValue)
        hasher.combine(self.maxValuesPerFacet?.hashValue)
        hasher.combine(self.sortFacetValuesBy?.hashValue)
        hasher.combine(self.sumOrFiltersScores?.hashValue)
    }
}
