// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Recommend hit.
public struct RecommendHit: Codable, JSONEncodable {
    /// Unique record identifier.
    public var objectID: String
    /// Surround words that match the query with HTML tags for highlighting.
    public var highlightResult: [String: RecommendHighlightResult]?
    /// Snippets that show the context around a matching search query.
    public var snippetResult: [String: RecommendSnippetResult]?
    public var rankingInfo: RecommendRankingInfo?
    public var distinctSeqID: Int?
    /// Recommendation score.
    public var score: Double?

    public init(
        objectID: String,
        highlightResult: [String: RecommendHighlightResult]? = nil,
        snippetResult: [String: RecommendSnippetResult]? = nil,
        rankingInfo: RecommendRankingInfo? = nil,
        distinctSeqID: Int? = nil,
        score: Double? = nil
    ) {
        self.objectID = objectID
        self.highlightResult = highlightResult
        self.snippetResult = snippetResult
        self.rankingInfo = rankingInfo
        self.distinctSeqID = distinctSeqID
        self.score = score
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objectID
        case highlightResult = "_highlightResult"
        case snippetResult = "_snippetResult"
        case rankingInfo = "_rankingInfo"
        case distinctSeqID = "_distinctSeqID"
        case score = "_score"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            self.additionalProperties[key] = newValue
        }
    }

    public init(from dictionary: [String: AnyCodable]) throws {
        guard let objectID = dictionary["objectID"]?.value as? String else {
            throw GenericError(description: "Failed to cast")
        }
        self.objectID = objectID
        self.highlightResult = dictionary["highlightResult"]?.value as? [String: RecommendHighlightResult]

        self.snippetResult = dictionary["snippetResult"]?.value as? [String: RecommendSnippetResult]

        self.rankingInfo = dictionary["rankingInfo"]?.value as? RecommendRankingInfo

        self.distinctSeqID = dictionary["distinctSeqID"]?.value as? Int

        self.score = dictionary["score"]?.value as? Double

        for (key, value) in dictionary {
            switch key {
            case "objectID", "highlightResult", "snippetResult", "rankingInfo", "distinctSeqID", "score":
                continue
            default:
                self.additionalProperties[key] = value
            }
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.objectID, forKey: .objectID)
        try container.encodeIfPresent(self.highlightResult, forKey: .highlightResult)
        try container.encodeIfPresent(self.snippetResult, forKey: .snippetResult)
        try container.encodeIfPresent(self.rankingInfo, forKey: .rankingInfo)
        try container.encodeIfPresent(self.distinctSeqID, forKey: .distinctSeqID)
        try container.encodeIfPresent(self.score, forKey: .score)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(self.additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.objectID = try container.decode(String.self, forKey: .objectID)
        self.highlightResult = try container.decodeIfPresent(
            [String: RecommendHighlightResult].self,
            forKey: .highlightResult
        )
        self.snippetResult = try container.decodeIfPresent(
            [String: RecommendSnippetResult].self,
            forKey: .snippetResult
        )
        self.rankingInfo = try container.decodeIfPresent(RecommendRankingInfo.self, forKey: .rankingInfo)
        self.distinctSeqID = try container.decodeIfPresent(Int.self, forKey: .distinctSeqID)
        self.score = try container.decodeIfPresent(Double.self, forKey: .score)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("objectID")
        nonAdditionalPropertyKeys.insert("_highlightResult")
        nonAdditionalPropertyKeys.insert("_snippetResult")
        nonAdditionalPropertyKeys.insert("_rankingInfo")
        nonAdditionalPropertyKeys.insert("_distinctSeqID")
        nonAdditionalPropertyKeys.insert("_score")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        self.additionalProperties = try additionalPropertiesContainer.decodeMap(
            AnyCodable.self,
            excludedKeys: nonAdditionalPropertyKeys
        )
    }
}

extension RecommendHit: Equatable {
    public static func ==(lhs: RecommendHit, rhs: RecommendHit) -> Bool {
        lhs.objectID == rhs.objectID &&
            lhs.highlightResult == rhs.highlightResult &&
            lhs.snippetResult == rhs.snippetResult &&
            lhs.rankingInfo == rhs.rankingInfo &&
            lhs.distinctSeqID == rhs.distinctSeqID &&
            lhs.score == rhs.score
            && lhs.additionalProperties == rhs.additionalProperties
    }
}

extension RecommendHit: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.objectID.hashValue)
        hasher.combine(self.highlightResult?.hashValue)
        hasher.combine(self.snippetResult?.hashValue)
        hasher.combine(self.rankingInfo?.hashValue)
        hasher.combine(self.distinctSeqID?.hashValue)
        hasher.combine(self.score?.hashValue)
        hasher.combine(self.additionalProperties.hashValue)
    }
}
