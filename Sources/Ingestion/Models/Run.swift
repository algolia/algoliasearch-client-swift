// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct Run: Codable, JSONEncodable {
    /// Universally unique identifier (UUID) of a task run.
    public var runID: String
    public var appID: String
    /// Universally unique identifier (UUID) of a task.
    public var taskID: String
    public var status: RunStatus
    public var progress: RunProgress?
    public var outcome: RunOutcome?
    /// Maximum accepted percentage of failures for a task run to finish successfully.
    public var failureThreshold: Int?
    /// More information about the task run's outcome.
    public var reason: String?
    public var reasonCode: RunReasonCode?
    public var type: RunType
    /// Date of creation in RFC 3339 format.
    public var createdAt: String
    /// Date of start in RFC 3339 format.
    public var startedAt: String?
    /// Date of finish in RFC 3339 format.
    public var finishedAt: String?

    public init(
        runID: String,
        appID: String,
        taskID: String,
        status: RunStatus,
        progress: RunProgress? = nil,
        outcome: RunOutcome? = nil,
        failureThreshold: Int? = nil,
        reason: String? = nil,
        reasonCode: RunReasonCode? = nil,
        type: RunType,
        createdAt: String,
        startedAt: String? = nil,
        finishedAt: String? = nil
    ) {
        self.runID = runID
        self.appID = appID
        self.taskID = taskID
        self.status = status
        self.progress = progress
        self.outcome = outcome
        self.failureThreshold = failureThreshold
        self.reason = reason
        self.reasonCode = reasonCode
        self.type = type
        self.createdAt = createdAt
        self.startedAt = startedAt
        self.finishedAt = finishedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case runID
        case appID
        case taskID
        case status
        case progress
        case outcome
        case failureThreshold
        case reason
        case reasonCode
        case type
        case createdAt
        case startedAt
        case finishedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.runID, forKey: .runID)
        try container.encode(self.appID, forKey: .appID)
        try container.encode(self.taskID, forKey: .taskID)
        try container.encode(self.status, forKey: .status)
        try container.encodeIfPresent(self.progress, forKey: .progress)
        try container.encodeIfPresent(self.outcome, forKey: .outcome)
        try container.encodeIfPresent(self.failureThreshold, forKey: .failureThreshold)
        try container.encodeIfPresent(self.reason, forKey: .reason)
        try container.encodeIfPresent(self.reasonCode, forKey: .reasonCode)
        try container.encode(self.type, forKey: .type)
        try container.encode(self.createdAt, forKey: .createdAt)
        try container.encodeIfPresent(self.startedAt, forKey: .startedAt)
        try container.encodeIfPresent(self.finishedAt, forKey: .finishedAt)
    }
}

extension Run: Equatable {
    public static func ==(lhs: Run, rhs: Run) -> Bool {
        lhs.runID == rhs.runID &&
            lhs.appID == rhs.appID &&
            lhs.taskID == rhs.taskID &&
            lhs.status == rhs.status &&
            lhs.progress == rhs.progress &&
            lhs.outcome == rhs.outcome &&
            lhs.failureThreshold == rhs.failureThreshold &&
            lhs.reason == rhs.reason &&
            lhs.reasonCode == rhs.reasonCode &&
            lhs.type == rhs.type &&
            lhs.createdAt == rhs.createdAt &&
            lhs.startedAt == rhs.startedAt &&
            lhs.finishedAt == rhs.finishedAt
    }
}

extension Run: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.runID.hashValue)
        hasher.combine(self.appID.hashValue)
        hasher.combine(self.taskID.hashValue)
        hasher.combine(self.status.hashValue)
        hasher.combine(self.progress?.hashValue)
        hasher.combine(self.outcome?.hashValue)
        hasher.combine(self.failureThreshold?.hashValue)
        hasher.combine(self.reason?.hashValue)
        hasher.combine(self.reasonCode?.hashValue)
        hasher.combine(self.type.hashValue)
        hasher.combine(self.createdAt.hashValue)
        hasher.combine(self.startedAt?.hashValue)
        hasher.combine(self.finishedAt?.hashValue)
    }
}
