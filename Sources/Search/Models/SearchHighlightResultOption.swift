// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Surround words that match the query with HTML tags for highlighting.
public struct SearchHighlightResultOption: Codable, JSONEncodable {
    /// Highlighted attribute value, including HTML tags.
    public var value: String
    public var matchLevel: SearchMatchLevel
    /// List of matched words from the search query.
    public var matchedWords: [String]
    /// Whether the entire attribute value is highlighted.
    public var fullyHighlighted: Bool?

    public init(value: String, matchLevel: SearchMatchLevel, matchedWords: [String], fullyHighlighted: Bool? = nil) {
        self.value = value
        self.matchLevel = matchLevel
        self.matchedWords = matchedWords
        self.fullyHighlighted = fullyHighlighted
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case value
        case matchLevel
        case matchedWords
        case fullyHighlighted
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.value, forKey: .value)
        try container.encode(self.matchLevel, forKey: .matchLevel)
        try container.encode(self.matchedWords, forKey: .matchedWords)
        try container.encodeIfPresent(self.fullyHighlighted, forKey: .fullyHighlighted)
    }
}

extension SearchHighlightResultOption: Equatable {
    public static func ==(lhs: SearchHighlightResultOption, rhs: SearchHighlightResultOption) -> Bool {
        lhs.value == rhs.value &&
            lhs.matchLevel == rhs.matchLevel &&
            lhs.matchedWords == rhs.matchedWords &&
            lhs.fullyHighlighted == rhs.fullyHighlighted
    }
}

extension SearchHighlightResultOption: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.value.hashValue)
        hasher.combine(self.matchLevel.hashValue)
        hasher.combine(self.matchedWords.hashValue)
        hasher.combine(self.fullyHighlighted?.hashValue)
    }
}
