// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// Recommend rules parameters.
public struct SearchRecommendRulesParams: Codable, JSONEncodable {
    /// Search query.
    public var query: String?
    /// Only search for rules with matching context.
    public var context: String?
    /// Requested page of the API response.  Algolia uses `page` and `hitsPerPage` to control how search results are
    /// displayed
    /// ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  -
    /// `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page
    /// number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`,
    /// the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page,
    /// set `hitsPerPage` to 10 and `page` to 2.
    public var page: Int?
    /// Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are
    /// displayed
    /// ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  -
    /// `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page
    /// number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`,
    /// the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page,
    /// set `hitsPerPage` to 10 and `page` to 2.
    public var hitsPerPage: Int?
    /// Whether to only show rules where the value of their `enabled` property matches this parameter. If absent, show
    /// all rules, regardless of their `enabled` property.
    public var enabled: Bool?
    /// Filter expression. This only searches for rules matching the filter expression.
    public var filters: String?
    /// Include facets and facet values in the response. Use `['*']` to include all facets.
    public var facets: [String]?
    /// Maximum number of values to return for each facet.
    public var maxValuesPerFacet: Int?

    public init(
        query: String? = nil,
        context: String? = nil,
        page: Int? = nil,
        hitsPerPage: Int? = nil,
        enabled: Bool? = nil,
        filters: String? = nil,
        facets: [String]? = nil,
        maxValuesPerFacet: Int? = nil
    ) {
        self.query = query
        self.context = context
        self.page = page
        self.hitsPerPage = hitsPerPage
        self.enabled = enabled
        self.filters = filters
        self.facets = facets
        self.maxValuesPerFacet = maxValuesPerFacet
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case query
        case context
        case page
        case hitsPerPage
        case enabled
        case filters
        case facets
        case maxValuesPerFacet
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.query, forKey: .query)
        try container.encodeIfPresent(self.context, forKey: .context)
        try container.encodeIfPresent(self.page, forKey: .page)
        try container.encodeIfPresent(self.hitsPerPage, forKey: .hitsPerPage)
        try container.encodeIfPresent(self.enabled, forKey: .enabled)
        try container.encodeIfPresent(self.filters, forKey: .filters)
        try container.encodeIfPresent(self.facets, forKey: .facets)
        try container.encodeIfPresent(self.maxValuesPerFacet, forKey: .maxValuesPerFacet)
    }
}

extension SearchRecommendRulesParams: Equatable {
    public static func ==(lhs: SearchRecommendRulesParams, rhs: SearchRecommendRulesParams) -> Bool {
        lhs.query == rhs.query &&
            lhs.context == rhs.context &&
            lhs.page == rhs.page &&
            lhs.hitsPerPage == rhs.hitsPerPage &&
            lhs.enabled == rhs.enabled &&
            lhs.filters == rhs.filters &&
            lhs.facets == rhs.facets &&
            lhs.maxValuesPerFacet == rhs.maxValuesPerFacet
    }
}

extension SearchRecommendRulesParams: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.query?.hashValue)
        hasher.combine(self.context?.hashValue)
        hasher.combine(self.page?.hashValue)
        hasher.combine(self.hitsPerPage?.hashValue)
        hasher.combine(self.enabled?.hashValue)
        hasher.combine(self.filters?.hashValue)
        hasher.combine(self.facets?.hashValue)
        hasher.combine(self.maxValuesPerFacet?.hashValue)
    }
}
