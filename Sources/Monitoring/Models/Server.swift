// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct Server: Codable, JSONEncodable {
    /// Server name.
    public var name: String?
    public var region: MonitoringRegion?
    /// Included to support legacy applications. Use `is_replica` instead.
    @available(*, deprecated, message: "This property is deprecated.")
    public var isSlave: Bool?
    /// Whether this server is a replica of another server.
    public var isReplica: Bool?
    /// Name of the cluster to which this server belongs.
    public var cluster: String?
    public var status: ServerStatus?
    public var type: ModelType?

    public init(
        name: String? = nil,
        region: MonitoringRegion? = nil,
        isSlave: Bool? = nil,
        isReplica: Bool? = nil,
        cluster: String? = nil,
        status: ServerStatus? = nil,
        type: ModelType? = nil
    ) {
        self.name = name
        self.region = region
        self.isSlave = isSlave
        self.isReplica = isReplica
        self.cluster = cluster
        self.status = status
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case region
        case isSlave = "is_slave"
        case isReplica = "is_replica"
        case cluster
        case status
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.name, forKey: .name)
        try container.encodeIfPresent(self.region, forKey: .region)
        try container.encodeIfPresent(self.isSlave, forKey: .isSlave)
        try container.encodeIfPresent(self.isReplica, forKey: .isReplica)
        try container.encodeIfPresent(self.cluster, forKey: .cluster)
        try container.encodeIfPresent(self.status, forKey: .status)
        try container.encodeIfPresent(self.type, forKey: .type)
    }
}

extension Server: Equatable {
    public static func ==(lhs: Server, rhs: Server) -> Bool {
        lhs.name == rhs.name &&
            lhs.region == rhs.region &&
            lhs.isSlave == rhs.isSlave &&
            lhs.isReplica == rhs.isReplica &&
            lhs.cluster == rhs.cluster &&
            lhs.status == rhs.status &&
            lhs.type == rhs.type
    }
}

extension Server: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.name?.hashValue)
        hasher.combine(self.region?.hashValue)
        hasher.combine(self.isSlave?.hashValue)
        hasher.combine(self.isReplica?.hashValue)
        hasher.combine(self.cluster?.hashValue)
        hasher.combine(self.status?.hashValue)
        hasher.combine(self.type?.hashValue)
    }
}
