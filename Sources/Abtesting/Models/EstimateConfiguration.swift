// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

/// A/B test configuration for estimating the sample size and duration using minimum detectable effect.
public struct EstimateConfiguration: Codable, JSONEncodable {
    public var outliers: Outliers?
    public var emptySearch: EmptySearch?
    public var minimumDetectableEffect: MinimumDetectableEffect

    public init(
        outliers: Outliers? = nil,
        emptySearch: EmptySearch? = nil,
        minimumDetectableEffect: MinimumDetectableEffect
    ) {
        self.outliers = outliers
        self.emptySearch = emptySearch
        self.minimumDetectableEffect = minimumDetectableEffect
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case outliers
        case emptySearch
        case minimumDetectableEffect
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.outliers, forKey: .outliers)
        try container.encodeIfPresent(self.emptySearch, forKey: .emptySearch)
        try container.encode(self.minimumDetectableEffect, forKey: .minimumDetectableEffect)
    }
}

extension EstimateConfiguration: Equatable {
    public static func ==(lhs: EstimateConfiguration, rhs: EstimateConfiguration) -> Bool {
        lhs.outliers == rhs.outliers &&
            lhs.emptySearch == rhs.emptySearch &&
            lhs.minimumDetectableEffect == rhs.minimumDetectableEffect
    }
}

extension EstimateConfiguration: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.outliers?.hashValue)
        hasher.combine(self.emptySearch?.hashValue)
        hasher.combine(self.minimumDetectableEffect.hashValue)
    }
}
