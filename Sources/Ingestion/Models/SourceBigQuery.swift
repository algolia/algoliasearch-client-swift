// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct SourceBigQuery: Codable, JSONEncodable {
    /// Project ID of the BigQuery source.
    public var projectID: String
    /// Dataset ID of the BigQuery source.
    public var datasetID: String
    public var dataType: BigQueryDataType?
    /// Table name for the BigQuery export.
    public var table: String?
    /// Table prefix for a Google Analytics 4 data export to BigQuery.
    public var tablePrefix: String?
    /// Custom SQL request to extract data from the BigQuery table.
    public var customSQLRequest: String?
    /// Name of a column that contains a unique ID which will be used as `objectID` in Algolia.
    public var uniqueIDColumn: String?

    public init(
        projectID: String,
        datasetID: String,
        dataType: BigQueryDataType? = nil,
        table: String? = nil,
        tablePrefix: String? = nil,
        customSQLRequest: String? = nil,
        uniqueIDColumn: String? = nil
    ) {
        self.projectID = projectID
        self.datasetID = datasetID
        self.dataType = dataType
        self.table = table
        self.tablePrefix = tablePrefix
        self.customSQLRequest = customSQLRequest
        self.uniqueIDColumn = uniqueIDColumn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectID
        case datasetID
        case dataType
        case table
        case tablePrefix
        case customSQLRequest
        case uniqueIDColumn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.projectID, forKey: .projectID)
        try container.encode(self.datasetID, forKey: .datasetID)
        try container.encodeIfPresent(self.dataType, forKey: .dataType)
        try container.encodeIfPresent(self.table, forKey: .table)
        try container.encodeIfPresent(self.tablePrefix, forKey: .tablePrefix)
        try container.encodeIfPresent(self.customSQLRequest, forKey: .customSQLRequest)
        try container.encodeIfPresent(self.uniqueIDColumn, forKey: .uniqueIDColumn)
    }
}

extension SourceBigQuery: Equatable {
    public static func ==(lhs: SourceBigQuery, rhs: SourceBigQuery) -> Bool {
        lhs.projectID == rhs.projectID &&
            lhs.datasetID == rhs.datasetID &&
            lhs.dataType == rhs.dataType &&
            lhs.table == rhs.table &&
            lhs.tablePrefix == rhs.tablePrefix &&
            lhs.customSQLRequest == rhs.customSQLRequest &&
            lhs.uniqueIDColumn == rhs.uniqueIDColumn
    }
}

extension SourceBigQuery: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.projectID.hashValue)
        hasher.combine(self.datasetID.hashValue)
        hasher.combine(self.dataType?.hashValue)
        hasher.combine(self.table?.hashValue)
        hasher.combine(self.tablePrefix?.hashValue)
        hasher.combine(self.customSQLRequest?.hashValue)
        hasher.combine(self.uniqueIDColumn?.hashValue)
    }
}
