// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(AlgoliaCore)
    import AlgoliaCore
#endif

public struct DestinationIndexName: Codable, JSONEncodable {
    /// Algolia index name (case-sensitive).
    public var indexName: String
    public var recordType: RecordType?
    /// Attributes from your source to exclude from Algolia records.  Not all your data attributes will be useful for
    /// searching. Keeping your Algolia records small increases indexing and search performance.  - Exclude nested
    /// attributes with `.` notation. For example, `foo.bar` indexes the `foo` attribute and all its children **except**
    /// the `bar` attribute. - Exclude attributes from arrays with `[i]`, where `i` is the index of the array element.  
    /// For example, `foo.[0].bar` only excludes the `bar` attribute from the first element of the `foo` array, but
    /// indexes the complete `foo` attribute for all other elements.   Use `*` as wildcard: `foo.[*].bar` excludes `bar`
    /// from all elements of the `foo` array.
    public var attributesToExclude: [String]?

    public init(indexName: String, recordType: RecordType? = nil, attributesToExclude: [String]? = nil) {
        self.indexName = indexName
        self.recordType = recordType
        self.attributesToExclude = attributesToExclude
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case indexName
        case recordType
        case attributesToExclude
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.indexName, forKey: .indexName)
        try container.encodeIfPresent(self.recordType, forKey: .recordType)
        try container.encodeIfPresent(self.attributesToExclude, forKey: .attributesToExclude)
    }
}

extension DestinationIndexName: Equatable {
    public static func ==(lhs: DestinationIndexName, rhs: DestinationIndexName) -> Bool {
        lhs.indexName == rhs.indexName &&
            lhs.recordType == rhs.recordType &&
            lhs.attributesToExclude == rhs.attributesToExclude
    }
}

extension DestinationIndexName: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.indexName.hashValue)
        hasher.combine(self.recordType?.hashValue)
        hasher.combine(self.attributesToExclude?.hashValue)
    }
}
